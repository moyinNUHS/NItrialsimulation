geom_segment(x=centre, xend=centre, y=end-height.centrebox, yend=end-height.centrebox-bt.centrebox,
size=0.15, linejoin = "mitre", lineend = "butt",
arrow = arrow(length = unit(1, "mm"), type= "closed"))+
geom_segment(x=centre, xend=centre, y=end-2*height.centrebox-bt.centrebox, yend=end-2*height.centrebox-1.5*bt.centrebox,
size=0.15) +
geom_segment(x=0.5*width.side.box, xend=end-0.5*width.side.box, y=end-2*height.centrebox-1.5*bt.centrebox, yend=end-2*height.centrebox-1.5*bt.centrebox,
size=0.15) +
#label
annotate('text', x=centre, y=end-4*height.centrebox-3*bt.centrebox,label="Enrolment flow chart", size=3) +
theme_void()
#participant characteristics
humandata=data[data$subject_type=='Human',]
humandata=humandata[!is.na(humandata$stool_total),]
humandata$gender=ifelse(humandata$gender=='F', 'Female', 'Male')
humandata$cov2_chrdz=ifelse(humandata$cov2_chrdz==1, 'Yes', 'No')
humandata$cov3_incontinent =ifelse(humandata$cov3_incontinent ==1, 'Yes', 'No')
humandata$cov4_abx6mth =ifelse(humandata$cov4_abx6mth ==1, 'Yes', 'No')
humandata$cov5_admit1yr =ifelse(humandata$cov5_admit1yr ==1, 'Yes', 'No')
humandata$cov6_travel[humandata$cov6_travel==1]='Asia'
humandata$cov6_travel[humandata$cov6_travel==2]='Europe/America'
humandata$cov6_travel[humandata$cov6_travel==3]='Asia, Europe/America'
humandata$cov6_travel[humandata$cov6_travel==0]='None'
humandata$cov10_st131infection=ifelse(is.na(humandata$cov10_st131infection), 0, 1)
humandata$cov10_st131infection=ifelse(humandata$cov10_st131infection==1, 'Yes','No')
humandata$cov8_housing=factor(humandata$cov8_housing)
colnames(humandata)[2:12]=c('Gender','Family size', 'Chronic Disease', 'Incontinence','Taken antibiotics in past 6 months', 'Admission in past 1 year', 'Overseas travel', 'Hours spent at home', 'Housing type' , 'Age', 'Infection with E coli ST131')
table1(~ `Age`+ Gender + `Family size` + `Housing type` +`Hours spent at home`+ `Overseas travel`+
`Chronic Disease`+ `Incontinence`+`Taken antibiotics in past 6 months`+ `Admission in past 1 year`+
`Infection with E coli ST131`,data=humandata)
###isolates
posfood.env=env[env$samplepcr_state==1,]
pos.noenvisolates=nrow(posfood.env[posfood.env$food==0,])
prop.envisolates=pos.noenvisolates/noenvisolates*100
pos.nofoodisolates=nrow(posfood.env)-pos.noenvisolates
prop.foodisolates=pos.nofoodisolates/nofoodisolates*100
pos.nohumanisolates= sum(data$stoolpcr_st131no[data$subject_type=='Human'], na.rm = TRUE)
prop.humanisolates=pos.nohumanisolates/nohumanisolates*100
pos.nopetisolates= sum(data$stoolpcr_st131no[!data$subject_type=='Human'], na.rm = TRUE)
prop.petisolates=pos.nopetisolates/nopetisolates*100
###samples
pos.noenvsamples=sum(posfood.env$samplepcr_state[posfood.env$food==0])
pos.nofoodsamples=sum(posfood.env$samplepcr_state[posfood.env$food==1])
pos.nohumanstools= sum(data$stoolpcr_state[data$subject_type=='Human']==2, na.rm = TRUE)
pos.nopetstools= sum(data$stoolpcr_state[data$subject_type!='Human']==2, na.rm = TRUE)
###individuals
pos.nopets.gavestools= sum(data$stoolpcr_state[data$subject_type!='Human']==2, na.rm = TRUE)
poshumanid=unique(data[data$stoolpcr_state[data$subject_type=='Human']==2,]$subject.code)
pos.noparticipants.gavestools=length(poshumanid[!is.na(poshumanid)])
###households
postfamilyid=unique(substr(unique(data[data$stoolpcr_state[data$subject_type=='Human']==2,]$subject.code), start = 1, stop = 8))
pos.nofamilies.gavestools=length(postfamilyid[!is.na(postfamilyid)])
labels=c('Households',
'Individuals', 'Individuals',
'Samples','Samples','Samples','Samples',
'Isolates', 'Isolates','Isolates','Isolates')
categories=c('Housholds',
'Humans','Pets',
'Humans','Pets','Food','Environment',
'Humans','Pets','Food','Environment')
posno=c(pos.nofamilies.gavestools,
pos.noparticipants.gavestools, pos.nopets.gavestools,
pos.nohumanstools, pos.nopetstools, pos.nofoodsamples, pos.noenvsamples,
pos.nohumanisolates, pos.nopetisolates, pos.nofoodisolates, pos.noenvisolates)
totalno=c(nofamilies.gavestools,
noparticipants.gavestools, nopets.gavestools,
nohumanstools, nopetstools, nofoodsamples, noenvsamples,
nohumanisolates, nopetisolates, nofoodisolates, noenvisolates)
proportion=posno/totalno*100
plotdf<-cbind.data.frame(labels=labels, categories=categories,
posno=posno, totalno=totalno, proportion=proportion)
ggplot(data=plotdf,
mapping=aes(x=proportion, y=labels, color=categories))+
geom_point(size=3, alpha = 0.85)+
labs(x='Proportion of qPCR positive reactions (%)',
y='', color='Sample origin')+
geom_text_repel(mapping = aes(label=posno), size=3)+
scale_color_manual(values=c('#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99'))+
theme_bw()
library(RColorBrewer)
n <- 2
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
col_vector = c('grey', 'red')
only1stool=as.character(data.human$subject.code[which(data.human$stool_total==1)])
data.human.msm=data.human[-match(only1stool,data.human$subject.code),]
ggplot(data=data.human.msm, mapping=aes(x=time_point, y=st131posdensity, color=as.factor(highdensityfamilies)))+
geom_line(aes(group=subject.code,color=as.factor(highdensityfamilies)))+
facet_wrap(~subject.code)+
labs(x='Sample number', y='Density of ST131 in each sample (%)', title="Density of E coli ST131 in stool samples per participant")+
scale_x_continuous(breaks=seq(1, 12, 2))+
scale_y_continuous(breaks=50)+
scale_colour_manual(name='Familes with high density ST131 carriers ', values=col_vector)+
theme(strip.background = element_blank(),
strip.text.x = element_blank(),
legend.position = 'bottom')
#
# load('st131_indiv_2states.Rdata')
#
# beta21<-unlist(rstan::extract(indiv.2S.model, pars = 'beta21'))#gives posterior values
# decon_rates<-exp(beta21)
# dur_carriage<-1/decon_rates
# meancarriage= round(mean(dur_carriage))
# quantilecarriage=round(quantile(dur_carriage, prob=c(0.05,0.95)))
#
# beta12<-unlist(rstan::extract(indiv.2S.model, pars = 'beta12'))
# con_rates<-exp(beta12)
# con_prob<-1-exp(-365*con_rates)
# meanprobcon= floor(mean(con_prob)*100)
# quantilecon=quantile(con_prob,prob=c(0.05,0.95))*100
data.human=data.human[order(data.human$time_point),]
data.human=data.human[order(data.human$subject.code),]
only1stool=as.character(data.human$subject.code[which(data.human$stool_total==1)])
data.human.msm=data.human[-match(only1stool,data.human$subject.code),]
human_summary <-statetable.msm(stoolpcr_state, subject.code, data=data.human.msm)
Q <- matrix(NA,nrow=2,ncol=2)
for(i in 1:dim(Q)[1]){ # Simple transition matrix (frequency based)
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(human_summary)[i,j]/sum(as.matrix(human_summary)[i,])
}
}
human.model <- msm(formula = stoolpcr_state ~ stool_time, subject=subject.code, data=data.human.msm, qmatrix = Q, gen.inits = TRUE)
meancarriage=round(totlos.msm(human.model, t=365)[2])
meanprobcon= round(pmatrix.msm(human.model,ci='normal', t=365)[2,1]*100)
paste('The probability for an individual to become colonised with E coli ST131 is', meanprobcon[1], '(95%CI=', meanprobcon[2] ,'-' ,meanprobcon[3], ')' ,'%','in one year.')
paste('The mean estimated duration of carriage is ',meancarriage,'days.')
carriers=data.human$subject.code[which(data.human$stool_totalst131>0)]
data.human$carrier=rep(NA, nrow(data.human))
data.human[which(match(data.human$subject.code, carriers)>0),]$carrier=1
data.human$carrier[which(is.na(data.human$carrier))]=0
data.human$age_cat<-rep(NA, nrow(data.human))
data.human$age_cat[which(data.human$cov9_age<2)]=0
data.human$age_cat[which(data.human$cov9_age>60)]=2
data.human$age_cat[which(is.na(data.human$age_cat))]=1
data.human$age_cat=as.factor(data.human$age_cat)
data.human$cov8_housing=factor(data.human$cov8_housing)
data.human$member_cat=as.factor(ifelse(data.human$cov1_member<5, 0, 1))
data.human $ cov10_st131infection=as.factor(data.human $ cov10_st131infection)
data.human$carrier=as.factor(data.human$carrier)
forglm=with(data.human, cbind.data.frame(subject.code, age_cat, cov9_age, cov1_member, member_cat, cov8_housing,cov10_st131infection, cov2_chrdz, cov3_incontinent, gender, cov5_admit1yr, cov6_travel,carrier))
forglm=unique(forglm)
carriageglm=glm(carrier~cov9_age+gender+member_cat+cov10_st131infection+cov2_chrdz+cov3_incontinent+cov8_housing, data=forglm, family = "binomial")
library(finalfit)
library(dplyr)
explanatory = c("cov9_age", "gender", 'member_cat','cov10_st131infection', "cov2_chrdz", "cov3_incontinent",'cov8_housing')
dependent = 'carrier'
forglm %>%
mutate(
gender = ff_label(gender, "Gender"),
cov9_age=ff_label(cov9_age, "Age"),
member_cat=ff_label(member_cat, "Family size of 4 or less"),
cov10_st131infection=ff_label(cov10_st131infection, "Infected with ST131"),
cov2_chrdz=ff_label(cov2_chrdz, "Chronic disease"),
cov3_incontinent=ff_label(cov3_incontinent, 'Incontinence'),
cov8_housing=ff_label(cov8_housing, 'Type of housing' )
) %>%
finalfit(dependent, explanatory)
load('st131_indiv_2states_covariates.Rdata')
indiv.2S.model<-indiv.2S.model.covariates
beta12<-rstan::extract(indiv.2S.model, pars = 'beta12')#gives posterior values
#Covariates<-c('Other members carrying ST131', 'Hours spent at home', 'Presence of high density peristent carriers', 'Hospital admission in past 1 year')
Covariates<-c('Presence of high density peristent carriers', 'Hours spent at home','Hospital admission in past 1 year')
plotdata<-c()
for(i in 2:4){
plotdata[[i-1]]<-as.data.table(cbind(rep(Covariates[i-1],10000),exp(beta12$beta12[,i])))
}
plotdf<-rbindlist(plotdata)
colnames(plotdf)<-c('Covariates','estimates')
plotdf$Covariates<-as.factor(plotdf$Covariates)
plotdf$estimates<-as.numeric(plotdf$estimates)
ggplot(plotdf, aes(x=Covariates, y=estimates)) +
scale_x_discrete(name = "Covariates")+
scale_y_continuous(name = "Hazard Ratio", limits = c(0,4))+
geom_boxplot(outlier.colour="black", outlier.shape=NA,notch=FALSE)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title='Factors associated with acquisition of ST131')
beta21<-rstan::extract(indiv.2S.model, pars = 'beta21')#gives posterior values
plotdata<-c()
for(i in 2:4){
plotdata[[i-1]]<-as.data.table(cbind(rep(Covariates[i-1],10000),exp(beta21$beta21[,i])))
}
plotdf<-rbindlist(plotdata)
colnames(plotdf)<-c('Covariates','estimates')
plotdf$Covariates<-as.factor(plotdf$Covariates)
plotdf$estimates<-as.numeric(plotdf$estimates)
ggplot(plotdf, aes(x=Covariates, y=estimates)) +
scale_x_discrete(name = "Covariates")+
scale_y_continuous(name = "Hazard Ratio", limits = c(0,4))+
geom_boxplot(outlier.colour="black", outlier.shape=NA,notch=FALSE)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title='Factors associated with carriage duration of ST131')
infectedp=prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2))
infected=data.human[data.human$cov10_st131infection==1,]
infected=infected[order(infected$time_point),]
infected=infected[order(infected$subject.code),]
numberinfected=length(unique(infected$subject.code))
numberinfectedcarryingST131=sum(infected$stool_totalst131>0, na.rm = TRUE)
infecteddensity=round(mean(infected$st131posdensity)*100)
infected_summary <-statetable.msm(stoolpcr_state, subject.code, data=infected)
Q <- matrix(NA,nrow=2,ncol=2)
for(i in 1:dim(Q)[1]){ # Simple transition matrix (frequency based)
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(infected_summary)[i,j]/sum(as.matrix(infected_summary)[i,])
}
}
infected.model <- msm(formula = stoolpcr_state ~ stool_time, subject=subject.code, data=infected, qmatrix = Q, gen.inits = TRUE)
infectedcarrytime=round(sojourn.msm(infected.model)[2,1])
noninfected=data.human[data.human$cov10_st131infection==0,]
noninfected=noninfected[grep('A',noninfected$subject.code),]
noninfected=noninfected[order(noninfected$time_point),]
noninfected=noninfected[order(noninfected$subject.code),]
numbernoninfectedcarryingst131=sum(noninfected$stool_totalst131>0, na.rm = TRUE)
numbernoninfected=length(unique(noninfected$subject.code))
noninfecteddensity= round(mean(noninfected$st131posdensity)*100)
noninfected_summary <-statetable.msm(stoolpcr_state, subject.code, data=noninfected)
Q <- matrix(NA,nrow=2,ncol=2)
for(i in 1:dim(Q)[1]){ # Simple transition matrix (frequency based)
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(noninfected_summary)[i,j]/sum(as.matrix(noninfected_summary)[i,])
}
}
noninfected.model <- msm(formula = stoolpcr_state ~ stool_time, subject=subject.code, data=noninfected, qmatrix = Q, gen.inits = TRUE)
noninfectedcarrytime=round(sojourn.msm(noninfected.model)[2,1])
infectedp=prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2))
infect.df=data.frame(Infected=c(numberinfected ,numberinfectedcarryingST131, infectedcarrytime, infecteddensity),
Noninfected=c(numbernoninfected,numbernoninfectedcarryingst131, noninfectedcarrytime, noninfecteddensity),
p=c())
infectedp
infectedp=(prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2)))$
str(prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2)))
infectedp=(prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2)))$
summary(prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2)))
prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2))
infectedp=(prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2)))$
str(prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2)))
infectedp=prop.test(matrix(c(numberinfected,numberinfectedcarryingST131 , numbernoninfected, numbernoninfectedcarryingst131),nrow=2))
infectedp$p.value
t.test(noninfectedcarrytime,infectedcarrytime )
infected=data.human[data.human$cov10_st131infection==1,]
infected=infected[order(infected$time_point),]
infected=infected[order(infected$subject.code),]
numberinfected=length(unique(infected$subject.code))
numberinfectedcarryingST131=sum(infected$stool_totalst131>0, na.rm = TRUE)
infecteddensity=round(mean(infected$st131posdensity)*100)
infected_summary <-statetable.msm(stoolpcr_state, subject.code, data=infected)
Q <- matrix(NA,nrow=2,ncol=2)
for(i in 1:dim(Q)[1]){ # Simple transition matrix (frequency based)
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(infected_summary)[i,j]/sum(as.matrix(infected_summary)[i,])
}
}
infected.model <- msm(formula = stoolpcr_state ~ stool_time, subject=subject.code, data=infected, qmatrix = Q, gen.inits = TRUE)
infectedcarrytime=round(sojourn.msm(infected.model)[2,1])
noninfected=data.human[data.human$cov10_st131infection==0,]
noninfected=noninfected[grep('A',noninfected$subject.code),]
noninfected=noninfected[order(noninfected$time_point),]
noninfected=noninfected[order(noninfected$subject.code),]
numbernoninfectedcarryingst131=sum(noninfected$stool_totalst131>0, na.rm = TRUE)
numbernoninfected=length(unique(noninfected$subject.code))
noninfecteddensity= round(mean(noninfected$st131posdensity)*100)
noninfected_summary <-statetable.msm(stoolpcr_state, subject.code, data=noninfected)
Q <- matrix(NA,nrow=2,ncol=2)
for(i in 1:dim(Q)[1]){ # Simple transition matrix (frequency based)
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(noninfected_summary)[i,j]/sum(as.matrix(noninfected_summary)[i,])
}
}
noninfected.model <- msm(formula = stoolpcr_state ~ stool_time, subject=subject.code, data=noninfected, qmatrix = Q, gen.inits = TRUE)
noninfectedcarrytime=round(sojourn.msm(noninfected.model)[2,1])
infect.df=data.frame(Infected=c(numberinfected ,numberinfectedcarryingST131, infectedcarrytime, infecteddensity),
Noninfected=c(numbernoninfected,numbernoninfectedcarryingst131, noninfectedcarrytime, noninfecteddensity),
p=c('',infectedp, ))
infected=data.human[data.human$cov10_st131infection==1,]
infected=infected[order(infected$time_point),]
infected=infected[order(infected$subject.code),]
numberinfected=length(unique(infected$subject.code))
numberinfectedcarryingST131=sum(infected$stool_totalst131>0, na.rm = TRUE)
infecteddensity=round(mean(infected$st131posdensity)*100)
infected_summary <-statetable.msm(stoolpcr_state, subject.code, data=infected)
Q <- matrix(NA,nrow=2,ncol=2)
for(i in 1:dim(Q)[1]){ # Simple transition matrix (frequency based)
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(infected_summary)[i,j]/sum(as.matrix(infected_summary)[i,])
}
}
infected.model <- msm(formula = stoolpcr_state ~ stool_time, subject=subject.code, data=infected, qmatrix = Q, gen.inits = TRUE)
infectedcarrytime=round(sojourn.msm(infected.model)[2,1])
noninfected=data.human[data.human$cov10_st131infection==0,]
noninfected=noninfected[grep('A',noninfected$subject.code),]
noninfected=noninfected[order(noninfected$time_point),]
noninfected=noninfected[order(noninfected$subject.code),]
numbernoninfectedcarryingst131=sum(noninfected$stool_totalst131>0, na.rm = TRUE)
numbernoninfected=length(unique(noninfected$subject.code))
noninfecteddensity= round(mean(noninfected$st131posdensity)*100)
noninfected_summary <-statetable.msm(stoolpcr_state, subject.code, data=noninfected)
Q <- matrix(NA,nrow=2,ncol=2)
for(i in 1:dim(Q)[1]){ # Simple transition matrix (frequency based)
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(noninfected_summary)[i,j]/sum(as.matrix(noninfected_summary)[i,])
}
}
noninfected.model <- msm(formula = stoolpcr_state ~ stool_time, subject=subject.code, data=noninfected, qmatrix = Q, gen.inits = TRUE)
noninfectedcarrytime=round(sojourn.msm(noninfected.model)[2,1])
infect.df=data.frame(Infected=c(numberinfected ,numberinfectedcarryingST131, infectedcarrytime, infecteddensity),
Noninfected=c(numbernoninfected,numbernoninfectedcarryingst131, noninfectedcarrytime, noninfecteddensity))
rownames(infect.df)=c('Total number','Number colonised with ST131','Carriage duration (days)','Density of ST131 carriage (%)')
colnames(infect.df)=c('Infected with ST131', 'Infected with non-ST131', 'p-value')
infected=data.human[data.human$cov10_st131infection==1,]
infected=infected[order(infected$time_point),]
infected=infected[order(infected$subject.code),]
numberinfected=length(unique(infected$subject.code))
numberinfectedcarryingST131=sum(infected$stool_totalst131>0, na.rm = TRUE)
infecteddensity=round(mean(infected$st131posdensity)*100)
infected_summary <-statetable.msm(stoolpcr_state, subject.code, data=infected)
Q <- matrix(NA,nrow=2,ncol=2)
for(i in 1:dim(Q)[1]){ # Simple transition matrix (frequency based)
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(infected_summary)[i,j]/sum(as.matrix(infected_summary)[i,])
}
}
infected.model <- msm(formula = stoolpcr_state ~ stool_time, subject=subject.code, data=infected, qmatrix = Q, gen.inits = TRUE)
infectedcarrytime=round(sojourn.msm(infected.model)[2,1])
noninfected=data.human[data.human$cov10_st131infection==0,]
noninfected=noninfected[grep('A',noninfected$subject.code),]
noninfected=noninfected[order(noninfected$time_point),]
noninfected=noninfected[order(noninfected$subject.code),]
numbernoninfectedcarryingst131=sum(noninfected$stool_totalst131>0, na.rm = TRUE)
numbernoninfected=length(unique(noninfected$subject.code))
noninfecteddensity= round(mean(noninfected$st131posdensity)*100)
noninfected_summary <-statetable.msm(stoolpcr_state, subject.code, data=noninfected)
Q <- matrix(NA,nrow=2,ncol=2)
for(i in 1:dim(Q)[1]){ # Simple transition matrix (frequency based)
for(j in 1:dim(Q)[2]){
Q[i,j]<-as.matrix(noninfected_summary)[i,j]/sum(as.matrix(noninfected_summary)[i,])
}
}
noninfected.model <- msm(formula = stoolpcr_state ~ stool_time, subject=subject.code, data=noninfected, qmatrix = Q, gen.inits = TRUE)
noninfectedcarrytime=round(sojourn.msm(noninfected.model)[2,1])
infect.df=data.frame(Infected=c(numberinfected ,numberinfectedcarryingST131, infectedcarrytime, infecteddensity),
Noninfected=c(numbernoninfected,numbernoninfectedcarryingst131, noninfectedcarrytime, noninfecteddensity))
rownames(infect.df)=c('Total number','Number colonised with ST131','Carriage duration (days)','Density of ST131 carriage (%)')
colnames(infect.df)=c('Infected with ST131', 'Infected with non-ST131')
knitr::kable(infect.df)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/moyin/Desktop/shitstuff/analysis/')
source('/Users/moyin/Desktop/shitstuff/analysis/st131 clean data 240419.R')
library(table1)
library(ggrepel) #avoid overlapping labels
library(msm)
library(data.table)
library(RColorBrewer)
n <- 2
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
col_vector = c('grey', 'red')
only1stool=as.character(data.human$subject.code[which(data.human$stool_total==1)])
data.human.msm=data.human[-match(only1stool,data.human$subject.code),]
data.human.msm$highdensityfamilies=ifelse(data.human.msm$highdensityfamilies==1, 'Yes', 'No')
ggplot(data=data.human.msm, mapping=aes(x=time_point, y=st131posdensity, color=as.factor(highdensityfamilies)))+
geom_line(aes(group=subject.code,color=as.factor(highdensityfamilies)))+
facet_wrap(~subject.code)+
labs(x='Sample number', y='Density of ST131 in each sample (%)', title="Density of E coli ST131 in stool samples per participant")+
scale_x_continuous(breaks=seq(1, 12, 2))+
scale_y_continuous(breaks=50)+
scale_colour_manual(name='Familes with high density ST131 carriers ', values=col_vector)+
theme(strip.background = element_blank(),
strip.text.x = element_blank(),
legend.position = 'bottom')
library(RColorBrewer)
n <- 34
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
ggplot(data=data.human.msm, mapping=aes(x=time_point, y=st131posdensity, color=as.factor(family.code)))+
geom_line(aes(group=subject.code,color=as.factor(family.code)))+
facet_wrap(~subject.code)+
labs(x='Sample number', y='Density of ST131 in each sample (%)', title="Density of E coli ST131 in stool samples per participant")+
scale_x_continuous(breaks=seq(1, 12, 2))+
scale_y_continuous(breaks=50)+
scale_colour_manual(name='Participating families', values=col_vector)+
theme(strip.background = element_blank(),
strip.text.x = element_blank())
library(RColorBrewer)
n <- 34
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
ggplot(data=data.human.msm, mapping=aes(x=time_point, y=st131posdensity, color=as.factor(family.code)))+
geom_line(aes(group=subject.code,color=as.factor(family.code)))+
facet_wrap(~subject.code)+
labs(x='Sample number', y='Density of ST131 in each sample (%)', title="Density of E coli ST131 in stool samples per participant")+
scale_x_continuous(breaks=seq(1, 12, 2))+
scale_y_continuous(breaks=50)+
scale_colour_manual(name='Participating families', values=col_vector)+
theme(strip.background = element_blank(),
strip.text.x = element_blank())
carriers=data.human$subject.code[which(data.human$stool_totalst131>0)]
data.human$carrier=rep(NA, nrow(data.human))
data.human[which(match(data.human$subject.code, carriers)>0),]$carrier=1
data.human$carrier[which(is.na(data.human$carrier))]=0
data.human$age_cat<-rep(NA, nrow(data.human))
data.human$age_cat[which(data.human$cov9_age<2)]=0
data.human$age_cat[which(data.human$cov9_age>60)]=2
data.human$age_cat[which(is.na(data.human$age_cat))]=1
data.human$age_cat=as.factor(data.human$age_cat)
data.human$cov8_housing=factor(data.human$cov8_housing)
data.human$member_cat=as.factor(ifelse(data.human$cov1_member<5, 0, 1))
data.human $ cov10_st131infection=as.factor(data.human $ cov10_st131infection)
data.human$carrier=as.factor(data.human$carrier)
forglm=with(data.human, cbind.data.frame(subject.code, age_cat, cov9_age, cov1_member, member_cat, cov8_housing,cov10_st131infection, cov2_chrdz, cov3_incontinent, gender, cov5_admit1yr, cov6_travel,carrier))
forglm=unique(forglm)
carriageglm=glm(carrier~cov9_age+gender+member_cat+cov10_st131infection+cov2_chrdz+cov3_incontinent+cov8_housing, data=forglm, family = "binomial")
library(finalfit)
library(dplyr)
explanatory = c("cov9_age", "gender", 'member_cat','cov10_st131infection', "cov2_chrdz", "cov3_incontinent",'cov8_housing')
dependent = 'carrier'
forglm %>%
mutate(
gender = ff_label(gender, "Gender"),
cov9_age=ff_label(cov9_age, "Age"),
member_cat=ff_label(member_cat, "Family size of 4 or less"),
cov10_st131infection=ff_label(cov10_st131infection, "Infected with ST131"),
cov2_chrdz=ff_label(cov2_chrdz, "Chronic disease"),
cov3_incontinent=ff_label(cov3_incontinent, 'Incontinence'),
cov8_housing=ff_label(cov8_housing, 'Type of housing' )
) %>%
finalfit(dependent, explanatory)
data.human=data.human[order(data.human$time_point),]
data.human=data.human[order(data.human$subject.code),]
only1stool=as.character(data.human$subject.code[which(data.human$stool_total==1)])
data.human.msm=data.human[-match(only1stool,data.human$subject.code),]
human_summary <-statetable.msm(stoolpcr_state, subject.code, data=data.human.msm)
forglm %>%
mutate(
gender = ff_label(gender, "Gender"),
cov9_age=ff_label(cov9_age, "Age"),
member_cat=ff_label(member_cat, "Family size of 4 or less"),
cov10_st131infection=ff_label(cov10_st131infection, "Infected with ST131"),
cov2_chrdz=ff_label(cov2_chrdz, "Chronic disease"),
cov3_incontinent=ff_label(cov3_incontinent, 'Incontinence'),
cov8_housing=ff_label(cov8_housing, 'Type of housing' )
) %>%
finalfit(dependent, explanatory)
forglm %>%
mutate(
gender = ff_label(gender, "Gender"),
cov9_age=ff_label(cov9_age, "Age"),
member_cat=ff_label(member_cat, "Family size of 4 or less"),
cov10_st131infection=ff_label(cov10_st131infection, "Infected with ST131"),
cov2_chrdz=ff_label(cov2_chrdz, "Chronic disease"),
cov3_incontinent=ff_label(cov3_incontinent, 'Incontinence'),
cov8_housing=ff_label(cov8_housing, 'Type of housing' )
) %>%
finalfit(dependent, explanatory)->t
t
forglm %>%
mutate(
gender = ff_label(gender, "Gender"),
cov9_age=ff_label(cov9_age, "Age"),
member_cat=ff_label(member_cat, "Family size of 4 or less"),
cov10_st131infection=ff_label(cov10_st131infection, "Infected with ST131"),
cov2_chrdz=ff_label(cov2_chrdz, "Chronic disease"),
cov3_incontinent=ff_label(cov3_incontinent, 'Incontinence'),
cov8_housing=ff_label(cov8_housing, 'Type of housing' )
) %>%
or_plot(dependent, explanatory)
###Calculation of sample size in presence of non-compliance##############################
#########################################################################################
rm(list = ls())
library(shiny); library(Rcpp)
library(gmm)
sourceCpp(file='rcpp.cpp')
rm(list=ls())
setwd("/Users/moyin/Desktop/angelsfly/NItrialsimulation/codes/") #set working directory
source(file = 'causalinference 11 March 2019 (no AT and matching).R')
sourceCpp(file='rcpp.cpp')
setwd('samplesizenoncompliance/')
require('rsconnect')
rsconnect::setAccountInfo(name='moyin',
token='08DB63C8279D2E9F5FA7772631536894',
secret='<SECRET>')
rm(list=ls())
setwd("/Users/moyin/Desktop/angelsfly/NItrialsimulation/codes/") #set working directory
source(file = 'causalinference 11 March 2019 (no AT and matching).R')
sourceCpp(file='rcpp.cpp')
library('rcpp')
setwd("/Users/moyin/Desktop/angelsfly/NItrialsimulation/codes/samplesizenoncompliance/")
sourceCpp(file='rcpp.cpp')
setwd('samplesizenoncompliance/')
getwd()
require('rsconnect')
rsconnect::setAccountInfo(name='moyin',
token='08DB63C8279D2E9F5FA7772631536894',
secret='<SECRET>')
rsconnect::setAccountInfo(name='moyin',
token='FBE16B347A997A2CD2335554C9469606',
secret='<SECRET>')
Sys.setlocale(locale="en_US.UTF-8")
rsconnect::setAccountInfo(name='moyin',
token='FBE16B347A997A2CD2335554C9469606',
secret='<SECRET>')
rsconnect::setAccountInfo(name='moyin',
token='FBE16B347A997A2CD2335554C9469606',
secret='YW4Y1i87fl9oxizYDUIaAXl8ztQMYdDWddCW6bqs')
deployApp()
rsconnect::setAccountInfo(name='moyin',
token='FBE16B347A997A2CD2335554C9469606',
secret='YW4Y1i87fl9oxizYDUIaAXl8ztQMYdDWddCW6bqs')
deployApp()
n=220
p.experiment=0.35
rsconnect::setAccountInfo(name='moyin',
token='FBE16B347A997A2CD2335554C9469606',
secret='YW4Y1i87fl9oxizYDUIaAXl8ztQMYdDWddCW6bqs')
deployApp()
