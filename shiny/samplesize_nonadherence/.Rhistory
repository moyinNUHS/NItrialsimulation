fit_AIPW <- optimalSeq(moPropen = moPropen,
moMain = moMain, moCont = moCont,
regimes = regimes,
data = d, response = Y, txName = c('A1','A2'),
Domains = cbind(rep(100,2),rep(400,2)),
pop.size = n, starting.values = rep(200,2))
#estimated values for eta
regimeCoef(object = fit_AIPW)
#######Replication of simulations from Zhang at al ########
###https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3843953/###
###########################################################
library('DynTxRegime')
rm(list = ls())
##HIV patients randomised to 1 (start) or 0 (not start)
##Time points baseline, 6 months
expit <- function(x) { exp(x) / (1 + exp(x)) } #inverse logit
n=500 #number of patients
#at baseline
C0 = rnorm(n, mean = 450, sd = sqrt(150))
A1 = rbinom(n, size = 1, prob = expit(2-0.006*C0)) #first decision depends on baseline CD4
#at 6 months
C1 = rnorm(n, mean = 1.25 * C0, sd = sqrt(60)) #CD4 improves with time
A2 = rbinom(n, size = 1, prob = A1 + (1 - A1) * expit(0.8 - 0.004 * C1))# second decision depends on 6-month CD4
#at 1 year
C2 = 400 + 1.6 * C0 - abs(250 - C0)*(A1 - ifelse((250-C0)>0,1,0))**2 - (1 - A1) * abs(720 - 2 * C1) * (A2 - ifelse((720 - 2*C1) > 0, 1, 0))**2
Y = rnorm(n, mean = C2, sd = 60)
### 400 + 1.6 * C0 -> CD4 improves from baseline after 1 year if subsequent terms are 0
### first decision:
### -abs(250 - C0)*(A1 - ifelse((250-C0)>0,1,0))**2  -> when C0 < 250, A1 = 1, whole term = 0
#                                                                      A1= 0, whole term = -(250 − c1)
#                                                       when C0 > 250, A1= 1, whole term = -(250 − c1)
#                                                                      A1= 0, whole term = 0
# At first decision, if start treatment when C0<250, there is benefit, withholding treatment -(250 − c1)
#                    if start treatment when C0>250, -(250 − c1), withholding treament there is benefit
###second decision:
### -abs(720 - 2 * C1) * (A2 - ifelse((720 - 2*C1) > 0, 1, 0))**2 -> when C0 < 360, A1 = 1, whole term = 0
#                                                                                   A1= 0, whole term = -(720 - 2*c1)
#                                                                    when C0 > 360, A1= 1, whole term = -(720 - 2*c1)
#                                                                                   A1= 0, whole term = 0
# At first decision, if start treatment when C0<360, there is no benefit, withholding treatment -(720 - 2*c1)
#                    if start treatment when C0>360, -(720 - 2*c1), withholding treament there is benefit
#true Q contrast functions -
## cont2(c0, c1, a1) = (1 − a1) (720 − 2*C1)
## cont1(c0) = 250 − c1
# the optimal treatment regime gopt=(gopt1,gopt2)
## gopt1(c1)= ifelse((250−c1>0), 1, 0)
## gopt2(c2,a1)=I{a1+(1−a1)(720−*c1)>0} and =I{a1+(1−a1)(360−c1)>0}
## E{Y*(gopt)} = 1120 (equivalent to 400+1.6*450, subsequent terms are 0)
d = cbind.data.frame(id = 1:n, #ID
C0 = C0,
C1 = C1,
A1 = A1,
A2 = A2,
Y = Y)  #Outcome
d$A1=ifelse(d$A1==1, 'start', 'hold')
d$A2=ifelse(d$A2==1, 'start', 'hold')
#################################################################################
####################################Analysis#####################################
#################################################################################
# Scenario 1 - Q functions are misspecified
###########################################
moPropen1 <- buildModelObj(model = ~ C0,
solver.method = 'glm',
solver.args = list('family'='binomial'),
predict.method = 'predict.glm',
predict.args = list(type='response'))
moPropen2 <- buildModelObj(model = ~ C1,
solver.method = 'glm',
solver.args = list('family'='binomial'),
predict.method = 'predict.glm',
predict.args = list(type='response'))
moPropen <- list(moPropen1, moPropen2)
# outcome model second stage
moMain2 <- buildModelObj(model = ~ C0 + A1 + A1:C0 + C1 + A1:C1,
solver.method = 'lm')
moCont2 <- buildModelObj(model = ~ A1 + A1:C1 + C1,
solver.method = 'lm')
# outcome model first stage
moMain1 <- buildModelObj(model = ~ C0,
solver.method = 'lm')
moCont1 <- buildModelObj(model = ~ C0,
solver.method = 'lm')
moMain <- list(moMain1, moMain2)
moCont <- list(moCont1, moCont2)
# regime function second stage
regime2 <- function(eta2, data) {
tst <- {data$C1 <= eta2}
rec <- rep('start', nrow(x = data))
rec[!tst] <- 'hold'
return( rec )
}
# regime function first stage
regime1 <- function(eta1, data) {
tst <-  {data$C0 <= eta1}
rec <- rep('start', nrow(x = data))
rec[!tst] <- 'hold'
return( rec )
}
regimes <- list(regime1, regime2)
#### Analysis using AIPW
fit_AIPW <- optimalSeq(moPropen = moPropen,
moMain = NULL, moCont = NULL,
regimes = regimes,
data = d, response = Y, txName = c('A1','A2'),
Domains = cbind(rep(100,2),rep(400,2)),
pop.size = n, starting.values = rep(200,2))
#estimated values for eta
regimeCoef(object = fit_AIPW)
#######Replication of simulations from Zhang at al ########
###https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3843953/###
###########################################################
library('DynTxRegime')
rm(list = ls())
##HIV patients randomised to 1 (start) or 0 (not start)
##Time points baseline, 6 months
expit <- function(x) { exp(x) / (1 + exp(x)) } #inverse logit
n=500 #number of patients
#at baseline
C0 = rnorm(n, mean = 450, sd = sqrt(150))
A1 = rbinom(n, size = 1, prob = expit(2-0.006*C0)) #first decision depends on baseline CD4
#at 6 months
C1 = rnorm(n, mean = 1.25 * C0, sd = sqrt(60)) #CD4 improves with time
A2 = rbinom(n, size = 1, prob = A1 + (1 - A1) * expit(0.8 - 0.004 * C1))# second decision depends on 6-month CD4
#at 1 year
C2 = 400 + 1.6 * C0 - abs(250 - C0)*(A1 - ifelse((250-C0)>0,1,0))**2 - (1 - A1) * abs(720 - 2 * C1) * (A2 - ifelse((720 - 2*C1) > 0, 1, 0))**2
Y = rnorm(n, mean = C2, sd = 60)
### 400 + 1.6 * C0 -> CD4 improves from baseline after 1 year if subsequent terms are 0
### first decision:
### -abs(250 - C0)*(A1 - ifelse((250-C0)>0,1,0))**2  -> when C0 < 250, A1 = 1, whole term = 0
#                                                                      A1= 0, whole term = -(250 − c1)
#                                                       when C0 > 250, A1= 1, whole term = -(250 − c1)
#                                                                      A1= 0, whole term = 0
# At first decision, if start treatment when C0<250, there is benefit, withholding treatment -(250 − c1)
#                    if start treatment when C0>250, -(250 − c1), withholding treament there is benefit
###second decision:
### -abs(720 - 2 * C1) * (A2 - ifelse((720 - 2*C1) > 0, 1, 0))**2 -> when C0 < 360, A1 = 1, whole term = 0
#                                                                                   A1= 0, whole term = -(720 - 2*c1)
#                                                                    when C0 > 360, A1= 1, whole term = -(720 - 2*c1)
#                                                                                   A1= 0, whole term = 0
# At second decision, if start treatment when C0<360, there is no benefit, withholding treatment -(720 - 2*c1)
#                    if start treatment when C0>360, -(720 - 2*c1), withholding treament there is benefit
#true Q contrast functions -
## cont2(c0, c1, a1) = (1 − a1) (720 − 2*C1)
## cont1(c0) = 250 − c1
# the optimal treatment regime gopt=(gopt1,gopt2)
## gopt1(c1)= ifelse((250−c1>0), 1, 0)
## gopt2(c2,a1)=I{a1+(1−a1)(720−*c1)>0} and =I{a1+(1−a1)(360−c1)>0}
## E{Y*(gopt)} = 1120 (equivalent to 400+1.6*450, subsequent terms are 0)
d = cbind.data.frame(id = 1:n, #ID
C0 = C0,
C1 = C1,
A1 = A1,
A2 = A2,
Y = Y)  #Outcome
d$A1=ifelse(d$A1==1, 'start', 'hold')
d$A2=ifelse(d$A2==1, 'start', 'hold')
#################################################################################
####################################Analysis#####################################
#################################################################################
# Scenario 1 - Q functions are misspecified
###########################################
moPropen1 <- buildModelObj(model = ~ C0,
solver.method = 'glm',
solver.args = list('family'='binomial'),
predict.method = 'predict.glm',
predict.args = list(type='response'))
moPropen2 <- buildModelObj(model = ~ C1,
solver.method = 'glm',
solver.args = list('family'='binomial'),
predict.method = 'predict.glm',
predict.args = list(type='response'))
moPropen <- list(moPropen1, moPropen2)
# outcome model second stage
moMain2 <- buildModelObj(model = ~ C0 + A1 + A1:C0 + C1 + A1:C1,
solver.method = 'lm')
moCont2 <- buildModelObj(model = ~ A1 + A1:C1 + C1,
solver.method = 'lm')
# outcome model first stage
moMain1 <- buildModelObj(model = ~ C0,
solver.method = 'lm')
moCont1 <- buildModelObj(model = ~ C0,
solver.method = 'lm')
moMain <- list(moMain1, moMain2)
moCont <- list(moCont1, moCont2)
# regime function second stage
regime2 <- function(eta1, eta2, data) {
tst <- {data$C1 <= eta2}
rec <- rep('start', nrow(x = data))
rec[!tst] <- 'hold'
return( rec )
}
# regime function first stage
regime1 <- function(eta1, eta2, data) {
tst <-  {data$C0 <= eta1}
rec <- rep('start', nrow(x = data))
rec[!tst] <- 'hold'
return( rec )
}
regimes <- list(regime1, regime2)
#### Analysis using AIPW
fit_AIPW <- optimalSeq(moPropen = moPropen,
moMain = NULL, moCont = NULL,
regimes = regimes,
data = d, response = Y, txName = c('A1','A2'),
Domains = cbind(rep(100,2),rep(400,2)),
pop.size = n, starting.values = rep(200,2))
#estimated values for eta
regimeCoef(object = fit_AIPW)
#######Replication of simulations from Zhang at al ########
###https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3843953/###
###########################################################
library('DynTxRegime')
rm(list = ls())
##HIV patients randomised to 1 (start) or 0 (not start)
##Time points baseline, 6 months
expit <- function(x) { exp(x) / (1 + exp(x)) } #inverse logit
n=500 #number of patients
#at baseline
C0 = rnorm(n, mean = 450, sd = sqrt(150))
A1 = rbinom(n, size = 1, prob = expit(2-0.006*C0)) #first decision depends on baseline CD4
#at 6 months
C1 = rnorm(n, mean = 1.25 * C0, sd = sqrt(60)) #CD4 improves with time
A2 = rbinom(n, size = 1, prob = A1 + (1 - A1) * expit(0.8 - 0.004 * C1))# second decision depends on 6-month CD4
#at 1 year
C2 = 400 + 1.6 * C0 - abs(250 - C0)*(A1 - ifelse((250-C0)>0,1,0))**2 - (1 - A1) * abs(720 - 2 * C1) * (A2 - ifelse((720 - 2*C1) > 0, 1, 0))**2
Y = rnorm(n, mean = C2, sd = 60)
### 400 + 1.6 * C0 -> CD4 improves from baseline after 1 year if subsequent terms are 0
### first decision:
### -abs(250 - C0)*(A1 - ifelse((250-C0)>0,1,0))**2  -> when C0 < 250, A1 = 1, whole term = 0
#                                                                      A1= 0, whole term = -(250 − c1)
#                                                       when C0 > 250, A1= 1, whole term = -(250 − c1)
#                                                                      A1= 0, whole term = 0
# At first decision, if start treatment when C0<250, there is benefit, withholding treatment -(250 − c1)
#                    if start treatment when C0>250, -(250 − c1), withholding treament there is benefit
###second decision:
### -abs(720 - 2 * C1) * (A2 - ifelse((720 - 2*C1) > 0, 1, 0))**2 -> when C0 < 360, A1 = 1, whole term = 0
#                                                                                   A1= 0, whole term = -(720 - 2*c1)
#                                                                    when C0 > 360, A1= 1, whole term = -(720 - 2*c1)
#                                                                                   A1= 0, whole term = 0
# At second decision, if start treatment when C0<360, there is no benefit, withholding treatment -(720 - 2*c1)
#                    if start treatment when C0>360, -(720 - 2*c1), withholding treament there is benefit
#true Q contrast functions -
## cont2(c0, c1, a1) = (1 − a1) (720 − 2*C1)
## cont1(c0) = 250 − c1
# the optimal treatment regime gopt=(gopt1,gopt2)
## gopt1(c1)= ifelse((250−c1>0), 1, 0)
## gopt2(c2,a1)=I{a1+(1−a1)(720−*c1)>0} and =I{a1+(1−a1)(360−c1)>0}
## E{Y*(gopt)} = 1120 (equivalent to 400+1.6*450, subsequent terms are 0)
d = cbind.data.frame(id = 1:n, #ID
C0 = C0,
C1 = C1,
A1 = A1,
A2 = A2,
Y = Y)  #Outcome
d$A1=ifelse(d$A1==1, 'start', 'hold')
d$A2=ifelse(d$A2==1, 'start', 'hold')
#################################################################################
####################################Analysis#####################################
#################################################################################
# Scenario 1 - Q functions are misspecified
###########################################
moPropen1 <- buildModelObj(model = ~ C0,
solver.method = 'glm',
solver.args = list('family'='binomial'),
predict.method = 'predict.glm',
predict.args = list(type='response'))
moPropen2 <- buildModelObj(model = ~ C1,
solver.method = 'glm',
solver.args = list('family'='binomial'),
predict.method = 'predict.glm',
predict.args = list(type='response'))
moPropen <- list(moPropen1, moPropen2)
# outcome model second stage
moMain2 <- buildModelObj(model = ~ C0 + A1 + A1:C0 + C1 + A1:C1,
solver.method = 'lm')
moCont2 <- buildModelObj(model = ~ A1 + A1:C1 + C1,
solver.method = 'lm')
# outcome model first stage
moMain1 <- buildModelObj(model = ~ C0,
solver.method = 'lm')
moCont1 <- buildModelObj(model = ~ C0,
solver.method = 'lm')
moMain <- list(moMain1, moMain2)
moCont <- list(moCont1, moCont2)
# regime function second stage
regime2 <- function(eta1, eta2, data) {
tst <- {data$C1 <= eta2}
rec <- rep('start', nrow(x = data))
rec[!tst] <- 'hold'
return( rec )
}
# regime function first stage
regime1 <- function(eta1, eta2, data) {
tst <-  {data$C0 <= eta1}
rec <- rep('start', nrow(x = data))
rec[!tst] <- 'hold'
return( rec )
}
regimes <- list(regime1, regime2)
#### Analysis using AIPW
fit_AIPW <- optimalSeq(moPropen = moPropen,
moMain = NULL, moCont = NULL,
regimes = regimes,
data = d, response = Y, txName = c('A1','A2'),
Domains = cbind(rep(100,3),rep(400,3)),
pop.size = n, starting.values = rep(200,3))
#estimated values for eta
regimeCoef(object = fit_AIPW)
#######Replication of simulations from Zhang at al ########
###https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3843953/###
###########################################################
library('DynTxRegime')
rm(list = ls())
##HIV patients randomised to 1 (start) or 0 (not start)
##Time points baseline, 6 months
expit <- function(x) { exp(x) / (1 + exp(x)) } #inverse logit
n=500 #number of patients
#at baseline
C0 = rnorm(n, mean = 450, sd = sqrt(150))
A1 = rbinom(n, size = 1, prob = expit(2-0.006*C0)) #first decision depends on baseline CD4
#at 6 months
C1 = rnorm(n, mean = 1.25 * C0, sd = sqrt(60)) #CD4 improves with time
A2 = rbinom(n, size = 1, prob = A1 + (1 - A1) * expit(0.8 - 0.004 * C1))# second decision depends on 6-month CD4
#at 1 year
C2 = 400 + 1.6 * C0 - abs(250 - C0)*(A1 - ifelse((250-C0)>0,1,0))**2 - (1 - A1) * abs(720 - 2 * C1) * (A2 - ifelse((720 - 2*C1) > 0, 1, 0))**2
Y = rnorm(n, mean = C2, sd = 60)
### 400 + 1.6 * C0 -> CD4 improves from baseline after 1 year if subsequent terms are 0
### first decision:
### -abs(250 - C0)*(A1 - ifelse((250-C0)>0,1,0))**2  -> when C0 < 250, A1 = 1, whole term = 0
#                                                                      A1= 0, whole term = -(250 − c1)
#                                                       when C0 > 250, A1= 1, whole term = -(250 − c1)
#                                                                      A1= 0, whole term = 0
# At first decision, if start treatment when C0<250, there is benefit, withholding treatment -(250 − c1)
#                    if start treatment when C0>250, -(250 − c1), withholding treament there is benefit
###second decision:
### -abs(720 - 2 * C1) * (A2 - ifelse((720 - 2*C1) > 0, 1, 0))**2 -> when C0 < 360, A1 = 1, whole term = 0
#                                                                                   A1= 0, whole term = -(720 - 2*c1)
#                                                                    when C0 > 360, A1= 1, whole term = -(720 - 2*c1)
#                                                                                   A1= 0, whole term = 0
# At second decision, if start treatment when C0<360, there is no benefit, withholding treatment -(720 - 2*c1)
#                    if start treatment when C0>360, -(720 - 2*c1), withholding treament there is benefit
#true Q contrast functions -
## cont2(c0, c1, a1) = (1 − a1) (720 − 2*C1)
## cont1(c0) = 250 − c1
# the optimal treatment regime gopt=(gopt1,gopt2)
## gopt1(c1)= ifelse((250−c1>0), 1, 0)
## gopt2(c2,a1)=I{a1+(1−a1)(720−*c1)>0} and =I{a1+(1−a1)(360−c1)>0}
## E{Y*(gopt)} = 1120 (equivalent to 400+1.6*450, subsequent terms are 0)
d = cbind.data.frame(id = 1:n, #ID
C0 = C0,
C1 = C1,
A1 = A1,
A2 = A2,
Y = Y)  #Outcome
d$A1=ifelse(d$A1==1, 'start', 'hold')
d$A2=ifelse(d$A2==1, 'start', 'hold')
#################################################################################
####################################Analysis#####################################
#################################################################################
# Scenario 1 - Q functions are misspecified
###########################################
moPropen1 <- buildModelObj(model = ~ C0,
solver.method = 'glm',
solver.args = list('family'='binomial'),
predict.method = 'predict.glm',
predict.args = list(type='response'))
moPropen2 <- buildModelObj(model = ~ C1,
solver.method = 'glm',
solver.args = list('family'='binomial'),
predict.method = 'predict.glm',
predict.args = list(type='response'))
moPropen <- list(moPropen1, moPropen2)
# outcome model second stage
moMain2 <- buildModelObj(model = ~ C0 + A1 + A1:C0 + C1 + A1:C1,
solver.method = 'lm')
moCont2 <- buildModelObj(model = ~ A1 + A1:C1 + C1,
solver.method = 'lm')
# outcome model first stage
moMain1 <- buildModelObj(model = ~ C0,
solver.method = 'lm')
moCont1 <- buildModelObj(model = ~ C0,
solver.method = 'lm')
moMain <- list(moMain1, moMain2)
moCont <- list(moCont1, moCont2)
# regime function second stage
regime2 <- function(eta1, eta2, data) {
tst <- {data$C1 <= eta2}
rec <- rep('start', nrow(x = data))
rec[!tst] <- 'hold'
return( rec )
}
# regime function first stage
regime1 <- function(eta1, eta2, data) {
tst <-  {data$C0 <= eta1}
rec <- rep('start', nrow(x = data))
rec[!tst] <- 'hold'
return( rec )
}
regimes <- list(regime1, regime2)
#### Analysis using AIPW
fit_AIPW <- optimalSeq(moPropen = moPropen,
moMain = NULL, moCont = NULL,
regimes = regimes,
data = d, response = Y, txName = c('A1','A2'),
Domains = cbind(rep(100,4),rep(400,4)),
pop.size = n, starting.values = rep(200,4))
#estimated values for eta
regimeCoef(object = fit_AIPW)
library(stringr)
master=read.csv(file = '/Users/moyin/Documents/nBox/ST131/data/Consolidated WGS and EHI isolates_ST131.xlsx - Consolidated.csv')
master$Isolates.Accession=as.character(master$Isolates.Accession)
master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)] = paste0(
substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 1, 10),
paste0('_0',substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 12, 12)))
###TALLY SENT AND RECEIVED###
#all isolates sent
b1_assession_sent=master$Isolates.Accession[as.character(master$WGS) =='WGS1']
length(b1_assession_sent) # 18 sent
b2_assession_sent=master$Isolates.Accession[as.character(master$WGS) =='WGS2']
length(b2_assession_sent) # 291 sent
#isolates received
### batch 1 all received
### batch 2
b2_received_checksize=read.csv('/Users/moyin/Documents/nBox/ST131/genomics/batch2/checkSize_batch2.csv', header = F)
.bs_assession_received_checksize = substring(b2_received_checksize$V2, 13)
bs_assession_received_checksize = .bs_assession_received_checksize[-grep('t', .bs_assession_received_checksize)]
length(bs_assession_received_checksize)/2 #299 received in the checkSize file
.bs_assession_received = as.character(unlist(read.delim('/Users/moyin/Documents/nBox/ST131/genomics/batch2/batch_2_received_files', header = F)))
bs_assession_received = substring(.bs_assession_received, 2)
length(bs_assession_received)/2 #299 received in the checkSize file
setdiff(bs_assession_received_checksize, bs_assession_received) # same files in checkSize and actual received
#tally isolates received and sent
sum(as.character(b2_assession_sent) %in% substr(bs_assession_received, 1, 13)) # all 291 sent are received
received.not.sent=bs_assession_received[!bs_assession_received %in% b2_assession_sent] #these received were not sent
knitr::opts_chunk$set(echo = TRUE)
#
dpois(x = 3, lambda = 5)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
0.3*15
dbinom(3, prob = 2/3, size=4)
dbinom(n=50, prob = 0.01, size=100)
rbinom(n=50, prob = 0.01, size=100)
rpois(1, lambda =50*0.01)
50*0.01
rpois(lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(1, lambda = 50*0.01)
rpois(50, lambda = 50*0.01)
sum(rpois(10000, lambda = 50*0.01))
sum(rbinom(n=10000, prob = 0.01, size=100))
sum(rbinom(n=10000, prob = 0.01, size=100))
sum(rpois(10000, lambda = 50*0.01))
sum(rbinom(n=10000, prob = 0.01, size=50))
sum(rpois(10000, lambda = 50*0.01))
sum(rbinom(n=10000, prob = 0.01, size=50))
sum(rpois(10000, lambda = 50*0.01))
sum(rbinom(50, prob = 0.01, size=50))
sum(rpois(50, lambda = 50*0.01))
load("../data/e100.RData")
library('Bioconductor')
install.packages('Bioconductor')
install.packages('msmb')
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
(rmultinom(1, prob = pvec, size = 8))
?rbinom
rmultinom(n = 8, prob =pvec, size = 1)
rmultinom(n = 1,prob = pvec, size = 8)
?rmultinom
library(stringr)
master=read.csv(file = '/Users/moyin/Documents/nBox/ST131/data/Consolidated WGS and EHI isolates_ST131.xlsx - Consolidated.csv')
master$Isolates.Accession=as.character(master$Isolates.Accession)
master$Isolates.Accession
master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)] = paste0(
substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 1, 10),
paste0('_0',substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 12, 12)))
master$Isolates.Accession
master=read.csv(file = '/Users/moyin/Documents/nBox/ST131/data/Consolidated WGS and EHI isolates_ST131.xlsx - Consolidated.csv')
master$Isolates.Accession=as.character(master$Isolates.Accession) #change assession to character
master$Isolates.Accession
master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)] = paste0(
substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 1, 10),
paste0('_0',substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 12, 12)))
master$Isolates.Accession
paste0('_0',substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 12, 12))
master=read.csv(file = '/Users/moyin/Documents/nBox/ST131/data/Consolidated WGS and EHI isolates_ST131.xlsx - Consolidated.csv')
master$Isolates.Accession=as.character(master$Isolates.Accession) #change assession to character
paste0('_0',substr(as.character(master$Isolates.Accession[-(1:65)][which(nchar(as.character(master$Isolates.Accession[-(1:65)]))!=13)]), 12, 12))
library("Biostrings")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
library('ggpubr')
install.packages('Biostrings')
setwd('/Users/moyin/Documents/nBox/git_projects/NItrialsimulation/shiny/samplesize_nonadherence/')
require('rsconnect')
rsconnect::setAccountInfo(name='moru',
token='30819BAEDD492333CE7CD293F3B08D42',
secret='j24TwHndsiybKqQZERFOt0s3L3ro8IG47/OgpLk/')
deployApp(account="moru",appName="samplesize_nonadherence")
