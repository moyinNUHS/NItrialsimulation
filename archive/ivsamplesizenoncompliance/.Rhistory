sliderInput(inputId = "p.stdcare",
label = "Expected proportion of participants to have outcome in standard-of-care arm ",
min = 0,
max = 25,
value = 25),
#input
selectInput(inputId="significance",
label="Level of significance",
choices= list("1 sided 97.5%" = 1, "1 sided 95%" = 2),
selected = 1,
multiple = FALSE,
selectize = TRUE),
#calculate!
actionButton(inputId="run",
label="Calculate!",
icon=NULL )
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
textOutput("DisplayResult")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
output$DisplayResult <- renderText({
source("IVsamplesize.R")
poweriv<-iv.power(n=n, p.experiment=p.experiment, p.stdcare=p.stdcare, comply.experiment=comply.experiment, comply.stdcare=comply.stdcare, sides=sides, sigficance=significance, NImargin=NImargin)
print(poweriv)
})
}
shinyApp(ui = ui, server = server)
source('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
plot(seq(1,100),seq(1,1000))
plot(seq(1,1000),seq(1,1000))
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
table(2,10,1)
label<-c("A","B")
value<-c(1,2)
table(lable, value)
table(label, value)
as.table(label, value)
cbind(label,value)
as.table(cbind(label,value))
runApp('ivsamplesize_shiny.R')
table <- observe({
label<- c("Number of participants per group",
"Non-inferiority margin",
"Proportion of participants with outcome in experimental arm",
"Proportion of participants with outcome in standard-of-care arm",
"Proportion of participants who complied to allocated intervention in experimental arm",
"Proportion of participants who complied to allocated intervention in standard-of-care arm",
"level of significance")
value<- c(input$n, input$NImargin, input$p.experiment, input$p.stdcare, input$comply.experiment, input$stdcare, input$significance)
as.table(cbind(label,value))
})
output$DisplayInput <- renderTable({
table()
})
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
data.frame(
Name = c("Number of participants per group",
"Non-inferiority margin",
"Proportion of participants with outcome in experimental arm",
"Proportion of participants with outcome in standard-of-care arm",
"Proportion of participants who complied to allocated intervention in experimental arm",
"Proportion of participants who complied to allocated intervention in standard-of-care arm",
"Level of significance"),
Value = as.character(c(input$n,
input$NImargin,
input$p.experiment,
input$p.stdcare,
input$comply.experiment,
input$stdcare,
input$significance)),
stringsAsFactors = FALSE)
Name = c("Number of participants per group",
"Non-inferiority margin",
"Proportion of participants with outcome in experimental arm",
"Proportion of participants with outcome in standard-of-care arm",
"Proportion of participants who complied to allocated intervention in experimental arm",
"Proportion of participants who complied to allocated intervention in standard-of-care arm",
"Level of significance")
input$n
input$n<-5
input<-null
input<-NULL
input$n<-5
input$NImargin<-5
input$p.experiment<-5
input$p.stdcare<-5
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
ivpower<-9
paste("The power for the above set of value input is", ivpower)
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
rm(list=ls()) # Clean working environment
require(ivpack) #load ivpack package
require(gmm) #load gmm package
#Define parameters
n<- 200                 # n:                  number of participants per group
NImargin<- 0.2          # NImargin:           non inferiority margin
p.experiment<-0.4       # p.experiment:       proportion of participants with outcome in experimental arm
p.stdcare<- 0.4         # p.stdcare:          proportion of participants with outcome in standard-of-care arm
comply.experiment<-0.8  # comply.experiment:  proportion of participants who complied to allocated intervention in experimental arm
comply.stdcare<- 0.9    # comply.stdcare:     proportion of participants who complied to allocated intervention in standard-of-care arm
significance<-1         # significance:       level of significance / alpha
#alpha error and critical value
iv.power<- function(n, p.experiment, p.stdcare, comply.experiment, comply.stdcare, sigficance, NImargin){
if (significance==1) {z <- qnorm(1-0.05/2)} else {z <- qnorm(1-0.1/2)}
true.eff<-p.experiment-p.stdcare
.power.iv <- c()
nIterations<- 50 #number of iterations per simulation run
if ((NImargin>0) & (true.eff < NImargin)) {
for(l in 1:nIterations) {
tryCatch({ #allow the function to run in case of errors
#simulate trial data frame
#RANDOMISATION ratio 1:1
simdata <- data.frame(seq(1,(2*n), by=1)) #create participant ID
simdata$randomization<-  c(rep(1,n), rep(0,n)) # randomization in 1:1 ratio
#INTERVENTION - according to predefined compliance in each group
n.comply.experiment<- round(comply.experiment*n)
n.nocomply.experiment<- n-n.comply.experiment
n.comply.stdcare<- round(comply.stdcare*n)
n.nocomply.stdcare<- n-n.comply.stdcare
simdata$intervention <- c(rep(1,n.comply.experiment), rep(0, n.nocomply.experiment), rep(0,n.comply.stdcare), rep(1,n.nocomply.stdcare))
#OUTCOMES counterfactual, depend on actual intervention
simdata$outcome1 <- rbinom(2*n,1,prob=p.experiment) #outcome for all participants if they take up intervention
simdata$outcome0 <- rbinom(2*n,1,prob=p.stdcare) #outcome for all participants if they take up standard of care
for (k in 1:(2*n)) {
if (simdata$intervention[k]==1) {simdata$outcome[k]<-simdata$outcome1[k] } else
simdata$outcome[k]<-simdata$outcome0[k]
}
# IV with 2 stage regression
y<- simdata$outcome
x<- simdata$intervention
iv<-simdata$randomization
data<-data.frame(y,x,iv)
asmm <- gmm(data[,"y"] ~ data[,"x"], x=data[,"iv"], vcov="iid")
eff.iv<-(summary(asmm))$ coefficients [2,1]
se<-(summary(asmm))$ coefficients [2,2]
CI.iv<-eff.iv + c(-1,1)*z*se
.power.iv[l]<- CI.iv[2]<NImargin
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) #receive error message if there is an error
}
# mean of power from iterated data
power.iv<- mean(.power.iv)
return (power.iv)
}
else (print ("NI margin must be positive, and true effect (in terms of negative outcomes) must be less than NI margin in this simulation"))
}
iv.power(n=n, p.experiment=p.experiment, p.stdcare=p.stdcare, comply.experiment=comply.experiment, comply.stdcare=comply.stdcare, sides=sides, sigficance=significance, NImargin=NImargin)
iv.power(n=n, p.experiment=p.experiment, p.stdcare=p.stdcare, comply.experiment=comply.experiment, comply.stdcare=comply.stdcare,sigficance=significance, NImargin=NImargin)
###Calculation of sample size with instrumental variable in presence of non-compliance###
#########################################################################################
rm(list = ls())
setwd("/Users/moyin/Desktop/VAP studd/Causal inference simulation/codes")
require(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Sample size calculator accounting for non-compliance in a non-inferiority trial using instrumental variable estimation as the primary analysis method"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input
numericInput(inputId = "n",
label = "Number of participants per group",
value = 100,
min = 1, max = NA, step = NA),
# Input
numericInput(inputId = "NImargin",
label = "Non-inferiority margin",
value = 0.1,
min = 0.01, max = 0.5, step = NA),
# Input
sliderInput(inputId = "comply.experiment",
label = "Expected proportion of participants to comply in experimental arm ",
min = 0.5,
max = 1,
value = 25),
# Input
sliderInput(inputId = "comply.stdcare",
label = "Expected proportion of participants to comply in standard-of-care arm ",
min = 0.5,
max = 1,
value = 25),
# Input
sliderInput(inputId = "p.experiment",
label = "Expected proportion of participants to have outcome in experimental arm ",
min = 0,
max = 0.5,
value = 25),
# Input
sliderInput(inputId = "p.stdcare",
label = "Expected proportion of participants to have outcome in standard-of-care arm ",
min = 0,
max = 0.5,
value = 25),
#input
selectInput(inputId="significance",
label="Level of significance",
choices= list("1 sided 97.5%" = 1, "1 sided 95%" = 2),
selected = 1,
multiple = FALSE,
selectize = TRUE),
#calculate!
actionButton(inputId="run",
label="Calculate!")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("DisplayInput"),
br(), br(),
textOutput("DisplayResult")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
tablevalues<- eventReactive (input$run, {
data.frame(
Name = c("Number of participants per group",
"Non-inferiority margin",
"Proportion of participants with outcome in experimental arm",
"Proportion of participants with outcome in standard-of-care arm",
"Proportion of participants who complied to allocated intervention in experimental arm",
"Proportion of participants who complied to allocated intervention in standard-of-care arm",
"Level of significance"),
Value = as.character(c(input$n,
input$NImargin,
input$p.experiment,
input$p.stdcare,
input$comply.experiment,
input$comply.stdcare,
input$significance)),
stringsAsFactors = FALSE)
})
output$DisplayInput <- renderTable({
tablevalues()
})
ivpower<- eventReactive (input$run, {
source("IVsamplesize.R")
iv.power(n=input$n,
p.experiment=input$p.experiment,
p.stdcare=input$p.stdcare,
comply.experiment=input$comply.experiment,
comply.stdcare=input$comply.stdcare,
sigficance=input$significance,
NImargin=input$NImargin)
})
output$DisplayResult <- renderText({
paste("The power for the above set of value input is", ivpower,".")
})
}
shinyApp(ui = ui, server = server)
data.frame(1,2)
data.frame(2,2)
data.frame(2,2:5)
x<-data.frame(2,2:5)
as.table(x)
table(x)
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
?sliderInput
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
runApp('ivsamplesize_shiny.R')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='moyin',
token='AD164763508DCB46CDE8985B3674AC2E',
secret='<SECRET>')
library(rsconnect)
rsconnect::deployApp('ivsamplesize_shiny.R')
rsconnect::deployApp('code/ivsamplesize_shiny.R')
rsconnect::deployApp('codes/ivsamplesize_shiny.R')
library(rsconnect)
rsconnect::deployApp('codes')
getwd()
library(rsconnect)
rsconnect::deployApp('IVsamplesize.R')
library(rsconnect)
rsconnect::deployApp('shiny')
getwd()
setwd("shiny")
getwd
getwd()
deployApp()
deployApp()
rsconnect::setAccountInfo(name='moyin',
token='AD164763508DCB46CDE8985B3674AC2E',
secret='<SECRET>')
rsconnect::setAccountInfo(name='moyin',
token='AD164763508DCB46CDE8985B3674AC2E',
secret='qqIdHbWulXxPLrd6vmVkFegJvWYSRSeEVy5QJsFO')
deployApp()
shiny::runApp()
runApp()
###Calculation of sample size with instrumental variable in presence of non-compliance###
#########################################################################################
rm(list = ls())
require(shiny)
require(ivpack) #load ivpack package
require(gmm) #load gmm package
iv.power<- function(n, p.experiment, p.stdcare, comply.experiment, comply.stdcare, sigficance, NImargin){
if (significance=="1 sided 97.5%") {z <- qnorm(1-0.05/2)} else {z <- qnorm(1-0.1/2)}
true.eff<-p.experiment-p.stdcare
.power.iv <- c()
nIterations<- 50 #number of iterations per simulation run
if ((NImargin>0) & (true.eff < NImargin)) {
for(l in 1:nIterations) {
tryCatch({ #allow the function to run in case of errors
#simulate trial data frame
#RANDOMISATION ratio 1:1
simdata <- data.frame(seq(1,(2*n), by=1)) #create participant ID
simdata$randomization<-  c(rep(1,n), rep(0,n)) # randomization in 1:1 ratio
#INTERVENTION - according to predefined compliance in each group
n.comply.experiment<- round(comply.experiment*n)
n.nocomply.experiment<- n-n.comply.experiment
n.comply.stdcare<- round(comply.stdcare*n)
n.nocomply.stdcare<- n-n.comply.stdcare
simdata$intervention <- c(rep(1,n.comply.experiment), rep(0, n.nocomply.experiment), rep(0,n.comply.stdcare), rep(1,n.nocomply.stdcare))
#OUTCOMES counterfactual, depend on actual intervention
simdata$outcome1 <- rbinom(2*n,1,prob=p.experiment) #outcome for all participants if they take up intervention
simdata$outcome0 <- rbinom(2*n,1,prob=p.stdcare) #outcome for all participants if they take up standard of care
for (k in 1:(2*n)) {
if (simdata$intervention[k]==1) {simdata$outcome[k]<-simdata$outcome1[k] } else
simdata$outcome[k]<-simdata$outcome0[k]
}
# IV with 2 stage regression
y<- simdata$outcome
x<- simdata$intervention
iv<-simdata$randomization
data<-data.frame(y,x,iv)
asmm <- gmm(data[,"y"] ~ data[,"x"], x=data[,"iv"], vcov="iid")
eff.iv<-(summary(asmm))$ coefficients [2,1]
se<-(summary(asmm))$ coefficients [2,2]
CI.iv<-eff.iv + c(-1,1)*z*se
.power.iv[l]<- CI.iv[2]<NImargin
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) #receive error message if there is an error
}
# mean of power from iterated data
power.iv<- mean(.power.iv)
return (power.iv)
}
else (print ("NI margin must be positive, and true effect (in terms of negative outcomes) must be less than NI margin in this simulation"))
}
# Define UI
ui <- fluidPage(
# App title ----
titlePanel("Sample size calculator accounting for non-compliance in a non-inferiority trial using instrumental variable estimation as the primary analysis method"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input
numericInput(inputId = "n",
label = "Number of participants per group",
value = 100,
min = 1, max = NA, step = NA),
# Input
sliderInput(inputId = "NImargin",
label = "Non-inferiority margin ",
min = 0.01,
max = 0.5,
value = 0.1,
step = 0.01),
# Input
sliderInput(inputId = "comply.experiment",
label = "Expected proportion of participants to comply in experimental arm ",
min = 0.5,
max = 1,
value = 1,
step = 0.05),
# Input
sliderInput(inputId = "comply.stdcare",
label = "Expected proportion of participants to comply in standard-of-care arm ",
min = 0.5,
max = 1,
value = 1,
step = 0.05),
# Input
sliderInput(inputId = "p.experiment",
label = "Expected proportion of participants to have outcome in experimental arm ",
min = 0,
max = 0.5,
value = 0,
step = 0.05),
# Input
sliderInput(inputId = "p.stdcare",
label = "Expected proportion of participants to have outcome in standard-of-care arm ",
min = 0,
max = 0.5,
value = 0,
step = 0.05),
#input
selectInput(inputId="significance",
label="Level of significance",
choices= list("1 sided 97.5%" = "1 sided 97.5%", "1 sided 95%" = "1 sided 95%"),
selected = "1 sided 97.5%",
multiple = FALSE,
selectize = TRUE),
#calculate!
actionButton(inputId="run",
label="Calculate!")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("Display")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
tablevalues<- eventReactive (input$run, {
source("IVsamplesize.R")
ivpower<-iv.power(n=input$n,
p.experiment=input$p.experiment,
p.stdcare=input$p.stdcare,
comply.experiment=input$comply.experiment,
comply.stdcare=input$comply.stdcare,
sigficance=input$significance,
NImargin=input$NImargin)
Name = c("Number of participants per group",
"Non-inferiority margin",
"Proportion of participants with outcome in experimental arm",
"Proportion of participants with outcome in standard-of-care arm",
"Proportion of participants who complied to allocated intervention in experimental arm",
"Proportion of participants who complied to allocated intervention in standard-of-care arm",
"Level of significance",
"Power")
Value = as.character(c(input$n,
input$NImargin,
input$p.experiment,
input$p.stdcare,
input$comply.experiment,
input$comply.stdcare,
input$significance,
ivpower))
cbind(Name,Value)
})
output$Display <- renderTable({
tablevalues()
})
}
shinyApp(ui = ui, server = server)
runApp()
list("1 sided 97.5%" = "1 sided 97.5%", "1 sided 95%" = "1 sided 95%")
runApp()
runApp()
getwd()
deployApp()
getwd()
deployApp()
getwd()
deployApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
runApp()
deployApp()
